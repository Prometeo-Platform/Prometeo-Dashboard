import React, { useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import DeviceTable from '../../components/DeviceTable';
import DeviceMap from '../../components/DeviceMap';
import AppContext from '../../context/app';

const processSensorData = (device) => {
  // Sort by isUserOwner
  return device
    .slice()
    .sort((a, b) => b.isUserOwner - a.isUserOwner)
    .map((s) => ({
      ...s,
      statusColor: (() => {
        if (!s.lastCheckin) {
          return 'yellow';
        }

        const secondsAgo =
          Math.floor(Date.now() / 1000) -
          Math.floor(new Date(s.lastCheckin) / 1000);

        if (secondsAgo > 604800) {
          return 'yellow';
        }

        return 'green';
      })(),
    }));
};

const MapPage = (props) => {
  const { t, currentUser, setCurrentUser, addToast } = useContext(AppContext);

  const navigate = useNavigate();

  const active = props.active;
  const language = props.language;
  // const page = props.page;
  const setActive = props.setActive;
  // const setPage = props.setPage;

  /*
  const [execQuery, { data, loading }] = useLazyQuery(GET_SENSORS, {
    errorPolicy: 'all',
    // TODO
    onError() {
      addToast({
        kind: 'warning',
        caption:
          'There were errors generated by the sensor query that may affect the display of relevant data. If this is a recurring warning, consider opening an issue.',
        title: 'Sensor Data Loaded with Error(s)',
      })
    },
  })
  */

  const [loading, setLoading] = useState('Loading...');

  const [pageSize, setPageSize] = useState(5);
  const [page, setPage] = useState(1);
  const [device, setDevice] = useState([]);
  const [currentlyVisibleDevice, setCurrentlyVisibleDevice] = useState([]);

  const [shouldShowSideMenu, setShouldShowSideMenu] = useState(false);
  const [displayedSensor, setDisplayedSensor] = useState({});
  const [currentHoveredSensor, setCurrentHoveredSensor] = useState();

  /*
  useEffect(() => {
    execQuery()
  }, [execQuery])
  */

  /*
  useEffect(() => {
    if (data && data.device) {
      setDevice(processSensorData(data.device))
    }
  }, [data])
  */

  useEffect(() => {
    setCurrentlyVisibleDevice(
      device.slice((page - 1) * pageSize, page * pageSize)
    );
  }, [page, pageSize, device]);

  const onSensorHover = (index) => {
    setCurrentHoveredSensor(index);
  };

  const onPaginationChange = (paginationInfo) => {
    setPage(paginationInfo.page);
    setPageSize(paginationInfo.pageSize);
  };

  return (
    <>
      <div className="bx--grid bx--grid--full-width device-content">
        <div className="bx--row">
          <div className="bx--col-md-16">
            <h1 className="profile-page__heading">
              {t('content.profile.heading')}
            </h1>
          </div>
        </div>

        <div className="bx--row">
          <div className="bx--col-md-16">
            <h2 className="profile-page__subheading">
              {t('content.profile.subheading')}
            </h2>
          </div>
        </div>

        <div className="device-map__container">
          <DeviceMap
            device={device}
            setDisplayedSensor={setDisplayedSensor}
            setShouldShowSideMenu={setShouldShowSideMenu}
            onSensorHover={onSensorHover}
            currentHoveredSensor={currentHoveredSensor}
          />
        </div>

        <div className="device-table__container">
          <DeviceTable
            loading={loading}
            navigate={navigate}
            device={device}
            onSensorHover={onSensorHover}
            currentHoveredSensor={currentHoveredSensor}
            onPaginationChange={onPaginationChange}
            page={page}
            pageSize={pageSize}
            currentlyVisibleDevice={currentlyVisibleDevice}
            setDevice={setDevice}
            shouldShowSideMenu={shouldShowSideMenu}
            displayedSensor={displayedSensor}
            setDisplayedSensor={setDisplayedSensor}
            setShouldShowSideMenu={setShouldShowSideMenu}
          />
        </div>
      </div>
    </>
  );
};

export default MapPage;
